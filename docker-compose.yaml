version: "3"

services:

  #Background services
  metaflow-metadata:
    image: "netflixoss/metaflow_metadata_service:latest"
    restart: always
    container_name: "metadata_service"
    ports:
      - "${MF_MIGRATION_PORT:-8082}:${MF_MIGRATION_PORT:-8082}"
      - "${MF_METADATA_PORT:-8080}:${MF_METADATA_PORT:-8080}"
    volumes:
      - .:/code
    environment:
      - MF_METADATA_DB_HOST=metaflow-postgres
      - MF_METADATA_DB_PORT=5432
      - MF_METADATA_DB_USER=${DB_USER}
      - MF_METADATA_DB_PSWD=${DB_PSWD}
      - MF_METADATA_DB_NAME=${DB_NAME}
      - MF_MIGRATION_ENDPOINTS_ENABLED=1
      - MF_METADATA_PORT=${MF_METADATA_PORT:-8080}
      - MF_METADATA_HOST=${MF_METADATA_HOST:-0.0.0.0}
      - MF_MIGRATION_PORT=${MF_MIGRATION_PORT:-8082}
      - METAFLOW_DEFAULT_DATASTORE=local
    depends_on:
      - metaflow-postgres
    networks:
      - mf-net

  metaflow-postgres:
    image: "postgres:11"
    restart: always
    container_name: "metaflow-postgres"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PSWD}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - mf-net
    ports:
      - "5432:5432"
    volumes:
      - mf-vol-postgres:/var/lib/postgresql/data2
    
  metaflow-minio:
    container_name: metaflow-minio
    image: minio/minio:latest
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    volumes:
      - mf-vol-minio:/minio_data
    command: minio server /minio_data --address :9000 --console-address :9001
    ports:
      - 9000:9000
      - 9001:9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - mf-net

  metaflow-ui:
    image: netflixoss/metaflow_metadata_service:latest
    container_name: metaflow-ui
    restart: always
    ports:
      - "8083:8083"
    environment:
      - MF_METADATA_DB_HOST=metaflow-postgres
      - MF_METADATA_DB_PORT=5432
      - MF_METADATA_DB_USER=${DB_USER}
      - MF_METADATA_DB_PSWD=${DB_PSWD}
      - MF_METADATA_DB_NAME=${DB_NAME}
      - MF_UI_METADATA_PORT=8083
      - MF_UI_METADATA_HOST=0.0.0.0
      - UI_ENABLED=1
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - FEATURE_ARTIFACT_SEARCH=1
      - FEATURE_ARTIFACT_TABLE=1
      - METAFLOW_DEFAULT_DATASTORE=s3
      - METAFLOW_DATASTORE_SYSROOT_S3=${S3_URI}
      - METAFLOW_S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
    command: ["/opt/latest/bin/python3", "-m", "services.ui_backend_service.ui_server"]
    depends_on:
      - metaflow-postgres
      - metaflow-metadata
      - metaflow-minio
    networks:
      - mf-net

  #Pipeline Containers
  feat-eng-container:
    build: ./pipeline/feature-engineering
    environment:
      - METAFLOW_USER=${METAFLOW_USER}
      - METAFLOW_DEFAULT_METADATA=service
      - METAFLOW_SERVICE_URL=${METAFLOW_SERVICE_URL}
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - METAFLOW_DEFAULT_DATASTORE=s3
      - METAFLOW_DATASTORE_SYSROOT_S3=${S3_URI}
      - METAFLOW_S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - INPUT_BUCKET=${INPUT_BUCKET}
      - INPUT_FILE=${INPUT_FILE}
      - OUTPUT_BUCKET=${OUTPUT_BUCKET}
      - OUTPUT_FILE=${OUTPUT_FILE}
    depends_on:
      - metaflow-postgres
      - metaflow-metadata
      - metaflow-minio
      - metaflow-ui
    networks:
      - mf-net



#Networks and Volumes
networks:
  mf-net:
    name: mf-net

volumes:
  mf-vol-postgres:
  mf-vol-minio:
